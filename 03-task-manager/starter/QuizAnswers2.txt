In this lesson, you created a middleware function called asyncWrapper. Why?
We need it to simplify the code in the controllers by wrapping controllers and working with promise using try-catch block in the middleware  

Suppose that you want to make sure that both a status code and an error message are sent back to the user when they request the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code:
const getTask = asyncWrapper(async (req, res, next) => {  
  const { id: taskID } = req.params;  
  const task = await Task.findOne({ _id: taskID });  
  try {
  if (!task) {  
    // your code here
    //assuming the same setup as in the video: there is a function createCustomError that returns the instance of the class CustomAPIError
    return next(createCustomError(`No task with the id: ${taskId}`, 404));
  }  
  res.status(200).json({ task });  
  });  


As you will see in the lessons that follow, you do not have to always create the asyncWrapper middleware, because you can instead use an NPM package called express-async-errors that provides the same capability.

COMMENTS FROM REVIEWER from week5:
Also, I'd like to hear about your experience using Postman. 

I have an experience with Postman and nothing so far looks rocket-science for me. However, I know there are a way more functionality of Postman that we haven't yet tried and i'm looking forward to learn something new and advanced about Postman.
